import scala.scalanative._
import scala.scalanative.native.Nat._
import stdint._
import types._

@native.extern
object in {
  type struct_iovec = native.CStruct2[native.Ptr[Byte],native.CSize]
  def readv(__fd: native.CInt, __iovec: native.Ptr[struct_iovec], __count: native.CInt): ssize_t = native.extern
  def writev(__fd: native.CInt, __iovec: native.Ptr[struct_iovec], __count: native.CInt): ssize_t = native.extern
  def preadv(__fd: native.CInt, __iovec: native.Ptr[struct_iovec], __count: native.CInt, __offset: __off_t): ssize_t = native.extern
  def pwritev(__fd: native.CInt, __iovec: native.Ptr[struct_iovec], __count: native.CInt, __offset: __off_t): ssize_t = native.extern
  type socklen_t = __socklen_t
  type enum___socket_type = native.CInt
  type sa_family_t = native.CUnsignedShort
  type struct_sockaddr = native.CStruct2[sa_family_t,native.CArray[native.CChar, Digit[_1, _4]]]
  type struct_sockaddr_storage = native.CStruct3[sa_family_t,native.CArray[native.CChar, Digit[_1, Digit[_1, _8]]],native.CUnsignedLong]
  type struct_msghdr = native.CStruct7[native.Ptr[Byte],socklen_t,native.Ptr[struct_iovec],native.CSize,native.Ptr[Byte],native.CSize,native.CInt]
  type struct_cmsghdr = native.CStruct4[native.CSize,native.CInt,native.CInt, native.Ptr[native.CChar]]
  def __cmsg_nxthdr(__mhdr: native.Ptr[struct_msghdr], __cmsg: native.Ptr[struct_cmsghdr]): native.Ptr[struct_cmsghdr] = native.extern
  type struct_linger = native.CStruct2[native.CInt,native.CInt]
  type struct_osockaddr = native.CStruct2[native.CUnsignedShort,native.CArray[native.CUnsignedChar, Digit[_1, _4]]]
  def socket(__domain: native.CInt, __type: native.CInt, __protocol: native.CInt): native.CInt = native.extern
  def socketpair(__domain: native.CInt, __type: native.CInt, __protocol: native.CInt, __fds: native.Ptr[native.CInt]): native.CInt = native.extern
  def bind(__fd: native.CInt, __addr: native.Ptr[struct_sockaddr], __len: socklen_t): native.CInt = native.extern
  def getsockname(__fd: native.CInt, __addr: native.Ptr[struct_sockaddr], __len: native.Ptr[socklen_t]): native.CInt = native.extern
  def connect(__fd: native.CInt, __addr: native.Ptr[struct_sockaddr], __len: socklen_t): native.CInt = native.extern
  def getpeername(__fd: native.CInt, __addr: native.Ptr[struct_sockaddr], __len: native.Ptr[socklen_t]): native.CInt = native.extern
  def send(__fd: native.CInt, __buf: native.Ptr[Byte], __n: native.CSize, __flags: native.CInt): ssize_t = native.extern
  def recv(__fd: native.CInt, __buf: native.Ptr[Byte], __n: native.CSize, __flags: native.CInt): ssize_t = native.extern
  def sendto(__fd: native.CInt, __buf: native.Ptr[Byte], __n: native.CSize, __flags: native.CInt, __addr: native.Ptr[struct_sockaddr], __addr_len: socklen_t): ssize_t = native.extern
  def recvfrom(__fd: native.CInt, __buf: native.Ptr[Byte], __n: native.CSize, __flags: native.CInt, __addr: native.Ptr[struct_sockaddr], __addr_len: native.Ptr[socklen_t]): ssize_t = native.extern
  def sendmsg(__fd: native.CInt, __message: native.Ptr[struct_msghdr], __flags: native.CInt): ssize_t = native.extern
  def recvmsg(__fd: native.CInt, __message: native.Ptr[struct_msghdr], __flags: native.CInt): ssize_t = native.extern
  def getsockopt(__fd: native.CInt, __level: native.CInt, __optname: native.CInt, __optval: native.Ptr[Byte], __optlen: native.Ptr[socklen_t]): native.CInt = native.extern
  def setsockopt(__fd: native.CInt, __level: native.CInt, __optname: native.CInt, __optval: native.Ptr[Byte], __optlen: socklen_t): native.CInt = native.extern
  def listen(__fd: native.CInt, __n: native.CInt): native.CInt = native.extern
  def accept(__fd: native.CInt, __addr: native.Ptr[struct_sockaddr], __addr_len: native.Ptr[socklen_t]): native.CInt = native.extern
  def shutdown(__fd: native.CInt, __how: native.CInt): native.CInt = native.extern
  def sockatmark(__fd: native.CInt): native.CInt = native.extern
  def isfdtype(__fd: native.CInt, __fdtype: native.CInt): native.CInt = native.extern
  type in_addr_t = uint32_t
  type struct_in_addr = native.CStruct1[in_addr_t]
  type struct_ip_opts = native.CStruct2[struct_in_addr,native.CArray[native.CChar, Digit[_4, _0]]]
  type struct_ip_mreqn = native.CStruct3[struct_in_addr,struct_in_addr,native.CInt]
  type struct_in_pktinfo = native.CStruct3[native.CInt,struct_in_addr,struct_in_addr]
  type in_port_t = uint16_t
  type struct_in6_addr = native.CStruct1[native.CArray[Byte, Digit[_1, Digit[_2, _8]]]]
  type struct_sockaddr_in = native.CStruct4[sa_family_t,in_port_t,struct_in_addr,native.CArray[native.CUnsignedChar, _8]]
  type struct_sockaddr_in6 = native.CStruct5[sa_family_t,in_port_t,uint32_t,struct_in6_addr,uint32_t]
  type struct_ip_mreq = native.CStruct2[struct_in_addr,struct_in_addr]
  type struct_ip_mreq_source = native.CStruct3[struct_in_addr,struct_in_addr,struct_in_addr]
  type struct_ipv6_mreq = native.CStruct2[struct_in6_addr,native.CUnsignedInt]
  type struct_group_req = native.CStruct2[uint32_t,struct_sockaddr_storage]
  type struct_group_source_req = native.CStruct3[uint32_t,struct_sockaddr_storage,struct_sockaddr_storage]
  type struct_ip_msfilter = native.CStruct5[struct_in_addr,struct_in_addr,uint32_t,uint32_t,native.CArray[struct_in_addr, _1]]
  type struct_group_filter = native.CStruct5[uint32_t,struct_sockaddr_storage,uint32_t,uint32_t,native.CArray[struct_sockaddr_storage, _1]]
  def ntohl(__netlong: uint32_t): uint32_t = native.extern
  def ntohs(__netshort: uint16_t): uint16_t = native.extern
  def htonl(__hostlong: uint32_t): uint32_t = native.extern
  def htons(__hostshort: uint16_t): uint16_t = native.extern
  def bindresvport(__sockfd: native.CInt, __sock_in: native.Ptr[struct_sockaddr_in]): native.CInt = native.extern
  def bindresvport6(__sockfd: native.CInt, __sock_in: native.Ptr[struct_sockaddr_in6]): native.CInt = native.extern
}


object inEnums {
  final val enum___socket_type_SOCK_STREAM = 0
  final val enum___socket_type_SOCK_DGRAM = 1
  final val enum___socket_type_SOCK_RAW = 2
  final val enum___socket_type_SOCK_RDM = 3
  final val enum___socket_type_SOCK_SEQPACKET = 4
  final val enum___socket_type_SOCK_DCCP = 5
  final val enum___socket_type_SOCK_PACKET = 6
  final val enum___socket_type_SOCK_CLOEXEC = 7
  final val enum___socket_type_SOCK_NONBLOCK = 8
  final val enum_MSG_OOB = 0
  final val enum_MSG_PEEK = 1
  final val enum_MSG_DONTROUTE = 2
  final val enum_MSG_CTRUNC = 3
  final val enum_MSG_PROXY = 4
  final val enum_MSG_TRUNC = 5
  final val enum_MSG_DONTWAIT = 6
  final val enum_MSG_EOR = 7
  final val enum_MSG_WAITALL = 8
  final val enum_MSG_FIN = 9
  final val enum_MSG_SYN = 10
  final val enum_MSG_CONFIRM = 11
  final val enum_MSG_RST = 12
  final val enum_MSG_ERRQUEUE = 13
  final val enum_MSG_NOSIGNAL = 14
  final val enum_MSG_MORE = 15
  final val enum_MSG_WAITFORONE = 16
  final val enum_MSG_FASTOPEN = 17
  final val enum_MSG_CMSG_CLOEXEC = 18
  final val enum_SCM_RIGHTS = 0
  final val enum_SHUT_RD = 0
  final val enum_SHUT_WR = 1
  final val enum_SHUT_RDWR = 2
  final val enum_IPPROTO_IP = 0
  final val enum_IPPROTO_ICMP = 1
  final val enum_IPPROTO_IGMP = 2
  final val enum_IPPROTO_IPIP = 3
  final val enum_IPPROTO_TCP = 4
  final val enum_IPPROTO_EGP = 5
  final val enum_IPPROTO_PUP = 6
  final val enum_IPPROTO_UDP = 7
  final val enum_IPPROTO_IDP = 8
  final val enum_IPPROTO_TP = 9
  final val enum_IPPROTO_DCCP = 10
  final val enum_IPPROTO_IPV6 = 11
  final val enum_IPPROTO_RSVP = 12
  final val enum_IPPROTO_GRE = 13
  final val enum_IPPROTO_ESP = 14
  final val enum_IPPROTO_AH = 15
  final val enum_IPPROTO_MTP = 16
  final val enum_IPPROTO_BEETPH = 17
  final val enum_IPPROTO_ENCAP = 18
  final val enum_IPPROTO_PIM = 19
  final val enum_IPPROTO_COMP = 20
  final val enum_IPPROTO_SCTP = 21
  final val enum_IPPROTO_UDPLITE = 22
  final val enum_IPPROTO_MPLS = 23
  final val enum_IPPROTO_RAW = 24
  final val enum_IPPROTO_MAX = 25
  final val enum_IPPROTO_HOPOPTS = 0
  final val enum_IPPROTO_ROUTING = 1
  final val enum_IPPROTO_FRAGMENT = 2
  final val enum_IPPROTO_ICMPV6 = 3
  final val enum_IPPROTO_NONE = 4
  final val enum_IPPROTO_DSTOPTS = 5
  final val enum_IPPROTO_MH = 6
  final val enum_IPPORT_ECHO = 0
  final val enum_IPPORT_DISCARD = 1
  final val enum_IPPORT_SYSTAT = 2
  final val enum_IPPORT_DAYTIME = 3
  final val enum_IPPORT_NETSTAT = 4
  final val enum_IPPORT_FTP = 5
  final val enum_IPPORT_TELNET = 6
  final val enum_IPPORT_SMTP = 7
  final val enum_IPPORT_TIMESERVER = 8
  final val enum_IPPORT_NAMESERVER = 9
  final val enum_IPPORT_WHOIS = 10
  final val enum_IPPORT_MTP = 11
  final val enum_IPPORT_TFTP = 12
  final val enum_IPPORT_RJE = 13
  final val enum_IPPORT_FINGER = 14
  final val enum_IPPORT_TTYLINK = 15
  final val enum_IPPORT_SUPDUP = 16
  final val enum_IPPORT_EXECSERVER = 17
  final val enum_IPPORT_LOGINSERVER = 18
  final val enum_IPPORT_CMDSERVER = 19
  final val enum_IPPORT_EFSSERVER = 20
  final val enum_IPPORT_BIFFUDP = 21
  final val enum_IPPORT_WHOSERVER = 22
  final val enum_IPPORT_ROUTESERVER = 23
  final val enum_IPPORT_RESERVED = 24
  final val enum_IPPORT_USERRESERVED = 25
}
