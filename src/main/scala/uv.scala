import scala.scalanative._
import scala.scalanative.native.Nat._
import scala.scalanative.posix.sys.socket._
import stdint._
import types._
import semaphore._
import in._
import netdb._
import dirent._


@native.link("uv")
@native.extern
object uv {
  type struct___fsid_t = native.CStruct1[native.CArray[native.CInt, _2]]
  type u_int8_t = native.CUnsignedChar
  type u_int16_t = native.CUnsignedShort
  type u_int32_t = native.CUnsignedInt
  type u_int64_t = native.CUnsignedLong
  type struct_uv__work = native.CStruct4[native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_3, Digit[_2, _0]]]],Unit],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_3, Digit[_2, _0]]]],native.CInt,Unit],native.Ptr[struct_uv_loop_s],native.CArray[native.Ptr[Byte], _2]]
  type uv__io_cb = native.CFunctionPtr3[native.Ptr[struct_uv_loop_s],native.Ptr[struct_uv__io_s],native.CUnsignedInt,Unit]
  type uv__io_t = struct_uv__io_s
  type struct_uv__io_s = native.CStruct6[native.CFunctionPtr3[native.Ptr[struct_uv_loop_s],native.Ptr[native.CArray[Byte, Digit[_4, Digit[_4, _8]]]],native.CUnsignedInt,Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _2],native.CUnsignedInt,native.CUnsignedInt,native.CInt]
  type uv__async_cb = native.CFunctionPtr3[native.Ptr[struct_uv_loop_s],native.Ptr[struct_uv__async],native.CUnsignedInt,Unit]
  type struct_uv__async = native.CStruct3[native.CFunctionPtr3[native.Ptr[struct_uv_loop_s],native.Ptr[native.CArray[Byte, Digit[_5, Digit[_7, _6]]]],native.CUnsignedInt,Unit],uv__io_t,native.CInt]
  type struct_uv_buf_t = native.CStruct2[native.Ptr[native.CChar],native.CSize]
  type uv_buf_t = struct_uv_buf_t
  type uv_file = native.CInt
  type uv_os_sock_t = native.CInt
  type uv_os_fd_t = native.CInt
  type uv_once_t = pthread_once_t
  type uv_thread_t = pthread_t
  type uv_mutex_t = pthread_mutex_t
  type uv_rwlock_t = pthread_rwlock_t
  type uv_sem_t = sem_t
  type uv_cond_t = pthread_cond_t
  type uv_key_t = pthread_key_t
  type uv_barrier_t = pthread_barrier_t
  type uv_gid_t = gid_t
  type uv_uid_t = uid_t
  type uv__dirent_t = struct_dirent
  type struct_uv_lib_t = native.CStruct2[native.Ptr[Byte],native.Ptr[native.CChar]]
  type uv_lib_t = struct_uv_lib_t
  type enum_uv_errno_t = native.CInt
  type uv_errno_t = enum_uv_errno_t
  type enum_uv_handle_type = native.CInt
  type uv_handle_type = enum_uv_handle_type
  type enum_uv_req_type = native.CInt
  type uv_req_type = enum_uv_req_type
  type uv_loop_t = struct_uv_loop_s
  type uv_handle_t = struct_uv_handle_s
  type uv_stream_t = struct_uv_stream_s
  type uv_tcp_t = struct_uv_tcp_s
  type uv_udp_t = struct_uv_udp_s
  type uv_pipe_t = struct_uv_pipe_s
  type uv_tty_t = struct_uv_tty_s
  type uv_poll_t = struct_uv_poll_s
  type uv_timer_t = struct_uv_timer_s
  type uv_prepare_t = struct_uv_prepare_s
  type uv_check_t = struct_uv_check_s
  type uv_idle_t = struct_uv_idle_s
  type uv_async_t = struct_uv_async_s
  type uv_process_t = struct_uv_process_s
  type uv_fs_event_t = struct_uv_fs_event_s
  type uv_fs_poll_t = struct_uv_fs_poll_s
  type uv_signal_t = struct_uv_signal_s
  type uv_req_t = struct_uv_req_s
  type uv_getaddrinfo_t = struct_uv_getaddrinfo_s
  type uv_getnameinfo_t = struct_uv_getnameinfo_s
  type uv_shutdown_t = struct_uv_shutdown_s
  type uv_write_t = struct_uv_write_s
  type uv_connect_t = struct_uv_connect_s
  type uv_udp_send_t = struct_uv_udp_send_s
  type uv_fs_t = struct_uv_fs_s
  type uv_work_t = struct_uv_work_s
  type uv_cpu_info_t = struct_uv_cpu_info_s
  type uv_interface_address_t = struct_uv_interface_address_s
  type uv_dirent_t = struct_uv_dirent_s
  type enum_uv_loop_option = native.CInt
  type uv_loop_option = enum_uv_loop_option
  type enum_uv_run_mode = native.CInt
  type uv_run_mode = enum_uv_run_mode
  def uv_version(): native.CUnsignedInt = native.extern
  def uv_version_string(): native.Ptr[native.CChar] = native.extern
  type uv_malloc_func = native.CFunctionPtr1[native.CSize,native.Ptr[Byte]]
  type uv_realloc_func = native.CFunctionPtr2[native.Ptr[Byte],native.CSize,native.Ptr[Byte]]
  type uv_calloc_func = native.CFunctionPtr2[native.CSize,native.CSize,native.Ptr[Byte]]
  type uv_free_func = native.CFunctionPtr1[native.Ptr[Byte],Unit]
  def uv_replace_allocator(malloc_func: native.CFunctionPtr1[native.CSize,native.Ptr[Byte]], realloc_func: native.CFunctionPtr2[native.Ptr[Byte],native.CSize,native.Ptr[Byte]], calloc_func: native.CFunctionPtr2[native.CSize,native.CSize,native.Ptr[Byte]], free_func: native.CFunctionPtr1[native.Ptr[Byte],Unit]): native.CInt = native.extern
  def uv_default_loop(): native.Ptr[uv_loop_t] = native.extern
  def uv_loop_init(loop: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_loop_close(loop: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_loop_new(): native.Ptr[uv_loop_t] = native.extern
  def uv_loop_delete(anonymous: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_loop_size(): native.CSize = native.extern
  def uv_loop_alive(loop: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_loop_configure(loop: native.Ptr[uv_loop_t], option: uv_loop_option): native.CInt = native.extern
  def uv_run(anonymous: native.Ptr[uv_loop_t], mode: uv_run_mode): native.CInt = native.extern
  def uv_stop(anonymous: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_ref(anonymous: native.Ptr[uv_handle_t]): Unit = native.extern
  def uv_unref(anonymous: native.Ptr[uv_handle_t]): Unit = native.extern
  def uv_has_ref(anonymous: native.Ptr[uv_handle_t]): native.CInt = native.extern
  def uv_update_time(anonymous: native.Ptr[uv_loop_t]): Unit = native.extern
  def uv_now(anonymous: native.Ptr[uv_loop_t]): uint64_t = native.extern
  def uv_backend_fd(anonymous: native.Ptr[uv_loop_t]): native.CInt = native.extern
  def uv_backend_timeout(anonymous: native.Ptr[uv_loop_t]): native.CInt = native.extern
  type uv_alloc_cb = native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit]
  type uv_read_cb = native.CFunctionPtr3[native.Ptr[uv_stream_t],ssize_t,native.Ptr[uv_buf_t],Unit]
  type uv_write_cb = native.CFunctionPtr2[native.Ptr[uv_write_t],native.CInt,Unit]
  type uv_connect_cb = native.CFunctionPtr2[native.Ptr[uv_connect_t],native.CInt,Unit]
  type uv_shutdown_cb = native.CFunctionPtr2[native.Ptr[uv_shutdown_t],native.CInt,Unit]
  type uv_connection_cb = native.CFunctionPtr2[native.Ptr[uv_stream_t],native.CInt,Unit]
  type uv_close_cb = native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit]
  type uv_poll_cb = native.CFunctionPtr3[native.Ptr[uv_poll_t],native.CInt,native.CInt,Unit]
  type uv_timer_cb = native.CFunctionPtr1[native.Ptr[uv_timer_t],Unit]
  type uv_async_cb = native.CFunctionPtr1[native.Ptr[uv_async_t],Unit]
  type uv_prepare_cb = native.CFunctionPtr1[native.Ptr[uv_prepare_t],Unit]
  type uv_check_cb = native.CFunctionPtr1[native.Ptr[uv_check_t],Unit]
  type uv_idle_cb = native.CFunctionPtr1[native.Ptr[uv_idle_t],Unit]
  type uv_exit_cb = native.CFunctionPtr3[native.Ptr[uv_process_t],int64_t,native.CInt,Unit]
  type uv_walk_cb = native.CFunctionPtr2[native.Ptr[uv_handle_t],native.Ptr[Byte],Unit]
  type uv_fs_cb = native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]
  type uv_work_cb = native.CFunctionPtr1[native.Ptr[uv_work_t],Unit]
  type uv_after_work_cb = native.CFunctionPtr2[native.Ptr[uv_work_t],native.CInt,Unit]
  type uv_getaddrinfo_cb = native.CFunctionPtr3[native.Ptr[uv_getaddrinfo_t],native.CInt,native.Ptr[struct_addrinfo],Unit]
  type uv_getnameinfo_cb = native.CFunctionPtr4[native.Ptr[uv_getnameinfo_t],native.CInt,native.Ptr[native.CChar],native.Ptr[native.CChar],Unit]
  type struct_uv_timespec_t = native.CStruct2[native.CLong,native.CLong]
  type uv_timespec_t = struct_uv_timespec_t
  type struct_uv_stat_t = native.CStruct16[uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uv_timespec_t,uv_timespec_t,uv_timespec_t,uv_timespec_t]
  type uv_stat_t = struct_uv_stat_t
  type uv_fs_event_cb = native.CFunctionPtr4[native.Ptr[uv_fs_event_t],native.Ptr[native.CChar],native.CInt,native.CInt,Unit]
  type uv_fs_poll_cb = native.CFunctionPtr4[native.Ptr[uv_fs_poll_t],native.CInt,native.Ptr[uv_stat_t],native.Ptr[uv_stat_t],Unit]
  type uv_signal_cb = native.CFunctionPtr2[native.Ptr[uv_signal_t],native.CInt,Unit]
  type enum_uv_membership = native.CInt
  type uv_membership = enum_uv_membership
  def uv_strerror(err: native.CInt): native.Ptr[native.CChar] = native.extern
  def uv_err_name(err: native.CInt): native.Ptr[native.CChar] = native.extern
  type struct_uv_req_s = native.CStruct4[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4]]
  def uv_shutdown(req: native.Ptr[uv_shutdown_t], handle: native.Ptr[uv_stream_t], cb: native.CFunctionPtr2[native.Ptr[uv_shutdown_t],native.CInt,Unit]): native.CInt = native.extern
  type struct_uv_shutdown_s = native.CStruct6[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.Ptr[native.CArray[Byte, Digit[_1, Digit[_9, Digit[_8, _4]]]]],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_6, Digit[_4, _0]]]],native.CInt,Unit]]
  type struct_uv_handle_s = native.CStruct8[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_7, Digit[_6, _8]]]],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[native.CArray[Byte, Digit[_7, Digit[_6, _8]]]],native.CUnsignedInt]
  def uv_handle_size(type_ : uv_handle_type): native.CSize = native.extern
  def uv_req_size(type_ : uv_req_type): native.CSize = native.extern
  def uv_is_active(handle: native.Ptr[uv_handle_t]): native.CInt = native.extern
  def uv_walk(loop: native.Ptr[uv_loop_t], walk_cb: native.CFunctionPtr2[native.Ptr[uv_handle_t],native.Ptr[Byte],Unit], arg: native.Ptr[Byte]): Unit = native.extern
  def uv_close(handle: native.Ptr[uv_handle_t], close_cb: native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit]): Unit = native.extern
  def uv_send_buffer_size(handle: native.Ptr[uv_handle_t], value: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_recv_buffer_size(handle: native.Ptr[uv_handle_t], value: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_fileno(handle: native.Ptr[uv_handle_t], fd: native.Ptr[uv_os_fd_t]): native.CInt = native.extern
  def uv_buf_init(base: native.Ptr[native.CChar], len: native.CUnsignedInt): uv_buf_t = native.extern
  type struct_uv_stream_s = native.CStruct20[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CSize,native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit],native.CFunctionPtr3[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_9, Digit[_8, _4]]]]],ssize_t,native.Ptr[uv_buf_t],Unit],native.Ptr[uv_connect_t],native.Ptr[uv_shutdown_t],uv__io_t,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _2],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_9, Digit[_8, _4]]]]],native.CInt,Unit],native.CInt,native.CInt,native.Ptr[Byte]]
  def uv_listen(stream: native.Ptr[uv_stream_t], backlog: native.CInt, cb: native.CFunctionPtr2[native.Ptr[uv_stream_t],native.CInt,Unit]): native.CInt = native.extern
  def uv_accept(server: native.Ptr[uv_stream_t], client: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_read_start(anonymous: native.Ptr[uv_stream_t], alloc_cb: native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit], read_cb: native.CFunctionPtr3[native.Ptr[uv_stream_t],ssize_t,native.Ptr[uv_buf_t],Unit]): native.CInt = native.extern
  def uv_read_stop(anonymous: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_write(req: native.Ptr[uv_write_t], handle: native.Ptr[uv_stream_t], bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, cb: native.CFunctionPtr2[native.Ptr[uv_write_t],native.CInt,Unit]): native.CInt = native.extern
  def uv_write2(req: native.Ptr[uv_write_t], handle: native.Ptr[uv_stream_t], bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, send_handle: native.Ptr[uv_stream_t], cb: native.CFunctionPtr2[native.Ptr[uv_write_t],native.CInt,Unit]): native.CInt = native.extern
  def uv_try_write(handle: native.Ptr[uv_stream_t], bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt): native.CInt = native.extern
  type struct_uv_write_s = native.CStruct13[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_5, Digit[_3, _6]]]]],native.CInt,Unit],native.Ptr[uv_stream_t],native.Ptr[uv_stream_t],native.CArray[native.Ptr[Byte], _2],native.CUnsignedInt,native.Ptr[uv_buf_t],native.CUnsignedInt,native.CInt,native.CArray[uv_buf_t, _4]]
  def uv_is_readable(handle: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_is_writable(handle: native.Ptr[uv_stream_t]): native.CInt = native.extern
  def uv_stream_set_blocking(handle: native.Ptr[uv_stream_t], blocking: native.CInt): native.CInt = native.extern
  def uv_is_closing(handle: native.Ptr[uv_handle_t]): native.CInt = native.extern
  type struct_uv_tcp_s = native.CStruct20[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CSize,native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit],native.CFunctionPtr3[native.Ptr[uv_stream_t],ssize_t,native.Ptr[uv_buf_t],Unit],native.Ptr[uv_connect_t],native.Ptr[uv_shutdown_t],uv__io_t,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _2],native.CFunctionPtr2[native.Ptr[uv_stream_t],native.CInt,Unit],native.CInt,native.CInt,native.Ptr[Byte]]
  def uv_tcp_init(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_tcp_t]): native.CInt = native.extern
  def uv_tcp_init_ex(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_tcp_t], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_open(handle: native.Ptr[uv_tcp_t], sock: uv_os_sock_t): native.CInt = native.extern
  def uv_tcp_nodelay(handle: native.Ptr[uv_tcp_t], enable: native.CInt): native.CInt = native.extern
  def uv_tcp_keepalive(handle: native.Ptr[uv_tcp_t], enable: native.CInt, delay: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_simultaneous_accepts(handle: native.Ptr[uv_tcp_t], enable: native.CInt): native.CInt = native.extern
  type enum_uv_tcp_flags = native.CInt
  def uv_tcp_bind(handle: native.Ptr[uv_tcp_t], addr: native.Ptr[struct_sockaddr], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_tcp_getsockname(handle: native.Ptr[uv_tcp_t], name: native.Ptr[struct_sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_tcp_getpeername(handle: native.Ptr[uv_tcp_t], name: native.Ptr[struct_sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_tcp_connect(req: native.Ptr[uv_connect_t], handle: native.Ptr[uv_tcp_t], addr: native.Ptr[struct_sockaddr], cb: native.CFunctionPtr2[native.Ptr[uv_connect_t],native.CInt,Unit]): native.CInt = native.extern
  type struct_uv_connect_s = native.CStruct7[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_7, Digit[_6, _8]]]],native.CInt,Unit],native.Ptr[native.CArray[Byte, Digit[_1, Digit[_9, Digit[_8, _4]]]]],native.CArray[native.Ptr[Byte], _2]]
  type enum_uv_udp_flags = native.CInt
  type uv_udp_send_cb = native.CFunctionPtr2[native.Ptr[uv_udp_send_t],native.CInt,Unit]
  type uv_udp_recv_cb = native.CFunctionPtr5[native.Ptr[uv_udp_t],ssize_t,native.Ptr[uv_buf_t],native.Ptr[struct_sockaddr],native.CUnsignedInt,Unit]
  type struct_uv_udp_s = native.CStruct15[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CSize,native.CSize,native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit],native.CFunctionPtr5[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_7, Digit[_2, _8]]]]],ssize_t,native.Ptr[uv_buf_t],native.Ptr[struct_sockaddr],native.CUnsignedInt,Unit],uv__io_t,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _2]]
  type struct_uv_udp_send_s = native.CStruct13[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.Ptr[uv_udp_t],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_2, Digit[_5, Digit[_6, _0]]]]],native.CInt,Unit],native.CArray[native.Ptr[Byte], _2],struct_sockaddr_storage,native.CUnsignedInt,native.Ptr[uv_buf_t],ssize_t,native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_2, Digit[_5, Digit[_6, _0]]]]],native.CInt,Unit],native.CArray[uv_buf_t, _4]]
  def uv_udp_init(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_udp_t]): native.CInt = native.extern
  def uv_udp_init_ex(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_udp_t], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_udp_open(handle: native.Ptr[uv_udp_t], sock: uv_os_sock_t): native.CInt = native.extern
  def uv_udp_bind(handle: native.Ptr[uv_udp_t], addr: native.Ptr[struct_sockaddr], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_udp_getsockname(handle: native.Ptr[uv_udp_t], name: native.Ptr[struct_sockaddr], namelen: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_udp_set_membership(handle: native.Ptr[uv_udp_t], multicast_addr: native.Ptr[native.CChar], interface_addr: native.Ptr[native.CChar], membership: uv_membership): native.CInt = native.extern
  def uv_udp_set_multicast_loop(handle: native.Ptr[uv_udp_t], on: native.CInt): native.CInt = native.extern
  def uv_udp_set_multicast_ttl(handle: native.Ptr[uv_udp_t], ttl: native.CInt): native.CInt = native.extern
  def uv_udp_set_multicast_interface(handle: native.Ptr[uv_udp_t], interface_addr: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_udp_set_broadcast(handle: native.Ptr[uv_udp_t], on: native.CInt): native.CInt = native.extern
  def uv_udp_set_ttl(handle: native.Ptr[uv_udp_t], ttl: native.CInt): native.CInt = native.extern
  def uv_udp_send(req: native.Ptr[uv_udp_send_t], handle: native.Ptr[uv_udp_t], bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, addr: native.Ptr[struct_sockaddr], send_cb: native.CFunctionPtr2[native.Ptr[uv_udp_send_t],native.CInt,Unit]): native.CInt = native.extern
  def uv_udp_try_send(handle: native.Ptr[uv_udp_t], bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, addr: native.Ptr[struct_sockaddr]): native.CInt = native.extern
  def uv_udp_recv_start(handle: native.Ptr[uv_udp_t], alloc_cb: native.CFunctionPtr3[native.Ptr[uv_handle_t],native.CSize,native.Ptr[uv_buf_t],Unit], recv_cb: native.CFunctionPtr5[native.Ptr[uv_udp_t],ssize_t,native.Ptr[uv_buf_t],native.Ptr[struct_sockaddr],native.CUnsignedInt,Unit]): native.CInt = native.extern
  def uv_udp_recv_stop(handle: native.Ptr[uv_udp_t]): native.CInt = native.extern
  type struct_uv_tty_s = native.CArray[Byte, Digit[_2, Digit[_4, Digit[_9, _6]]]]
  type enum_uv_tty_mode_t = native.CInt
  type uv_tty_mode_t = enum_uv_tty_mode_t
  def uv_tty_init(anonymous1: native.Ptr[uv_loop_t], anonymous2: native.Ptr[uv_tty_t], fd: uv_file, readable: native.CInt): native.CInt = native.extern
  def uv_tty_set_mode(anonymous: native.Ptr[uv_tty_t], mode: uv_tty_mode_t): native.CInt = native.extern
  def uv_tty_reset_mode(): native.CInt = native.extern
  def uv_tty_get_winsize(anonymous: native.Ptr[uv_tty_t], width: native.Ptr[native.CInt], height: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_guess_handle(file: uv_file): uv_handle_type = native.extern
  type struct_uv_pipe_s = native.CArray[Byte, Digit[_2, Digit[_1, Digit[_1, _2]]]]
  def uv_pipe_init(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_pipe_t], ipc: native.CInt): native.CInt = native.extern
  def uv_pipe_open(anonymous: native.Ptr[uv_pipe_t], file: uv_file): native.CInt = native.extern
  def uv_pipe_bind(handle: native.Ptr[uv_pipe_t], name: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_pipe_connect(req: native.Ptr[uv_connect_t], handle: native.Ptr[uv_pipe_t], name: native.Ptr[native.CChar], cb: native.CFunctionPtr2[native.Ptr[uv_connect_t],native.CInt,Unit]): Unit = native.extern
  def uv_pipe_getsockname(handle: native.Ptr[uv_pipe_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_pipe_getpeername(handle: native.Ptr[uv_pipe_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_pipe_pending_instances(handle: native.Ptr[uv_pipe_t], count: native.CInt): Unit = native.extern
  def uv_pipe_pending_count(handle: native.Ptr[uv_pipe_t]): native.CInt = native.extern
  def uv_pipe_pending_type(handle: native.Ptr[uv_pipe_t]): uv_handle_type = native.extern
  type struct_uv_poll_s = native.CStruct10[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr3[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_2, Digit[_8, _0]]]]],native.CInt,native.CInt,Unit],uv__io_t]
  type enum_uv_poll_event = native.CInt
  def uv_poll_init(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_poll_t], fd: native.CInt): native.CInt = native.extern
  def uv_poll_init_socket(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_poll_t], socket: uv_os_sock_t): native.CInt = native.extern
  def uv_poll_start(handle: native.Ptr[uv_poll_t], events: native.CInt, cb: native.CFunctionPtr3[native.Ptr[uv_poll_t],native.CInt,native.CInt,Unit]): native.CInt = native.extern
  def uv_poll_stop(handle: native.Ptr[uv_poll_t]): native.CInt = native.extern
  type struct_uv_prepare_s = native.CStruct10[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_9, Digit[_6, _0]]]],Unit],native.CArray[native.Ptr[Byte], _2]]
  def uv_prepare_init(anonymous: native.Ptr[uv_loop_t], prepare: native.Ptr[uv_prepare_t]): native.CInt = native.extern
  def uv_prepare_start(prepare: native.Ptr[uv_prepare_t], cb: native.CFunctionPtr1[native.Ptr[uv_prepare_t],Unit]): native.CInt = native.extern
  def uv_prepare_stop(prepare: native.Ptr[uv_prepare_t]): native.CInt = native.extern
  type struct_uv_check_s = native.CStruct10[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_9, Digit[_6, _0]]]],Unit],native.CArray[native.Ptr[Byte], _2]]
  def uv_check_init(anonymous: native.Ptr[uv_loop_t], check: native.Ptr[uv_check_t]): native.CInt = native.extern
  def uv_check_start(check: native.Ptr[uv_check_t], cb: native.CFunctionPtr1[native.Ptr[uv_check_t],Unit]): native.CInt = native.extern
  def uv_check_stop(check: native.Ptr[uv_check_t]): native.CInt = native.extern
  type struct_uv_idle_s = native.CStruct10[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_9, Digit[_6, _0]]]],Unit],native.CArray[native.Ptr[Byte], _2]]
  def uv_idle_init(anonymous: native.Ptr[uv_loop_t], idle: native.Ptr[uv_idle_t]): native.CInt = native.extern
  def uv_idle_start(idle: native.Ptr[uv_idle_t], cb: native.CFunctionPtr1[native.Ptr[uv_idle_t],Unit]): native.CInt = native.extern
  def uv_idle_stop(idle: native.Ptr[uv_idle_t]): native.CInt = native.extern
  type struct_uv_async_s = native.CStruct11[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_2, _4]]]]],Unit],native.CArray[native.Ptr[Byte], _2],native.CInt]
  def uv_async_init(anonymous: native.Ptr[uv_loop_t], async: native.Ptr[uv_async_t], async_cb: native.CFunctionPtr1[native.Ptr[uv_async_t],Unit]): native.CInt = native.extern
  def uv_async_send(async: native.Ptr[uv_async_t]): native.CInt = native.extern
  type struct_uv_timer_s = native.CStruct13[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_2, Digit[_1, _6]]]]],Unit],native.CArray[native.Ptr[Byte], _3],uint64_t,uint64_t,uint64_t]
  def uv_timer_init(anonymous: native.Ptr[uv_loop_t], handle: native.Ptr[uv_timer_t]): native.CInt = native.extern
  def uv_timer_start(handle: native.Ptr[uv_timer_t], cb: native.CFunctionPtr1[native.Ptr[uv_timer_t],Unit], timeout: uint64_t, repeat: uint64_t): native.CInt = native.extern
  def uv_timer_stop(handle: native.Ptr[uv_timer_t]): native.CInt = native.extern
  def uv_timer_again(handle: native.Ptr[uv_timer_t]): native.CInt = native.extern
  def uv_timer_set_repeat(handle: native.Ptr[uv_timer_t], repeat: uint64_t): Unit = native.extern
  def uv_timer_get_repeat(handle: native.Ptr[uv_timer_t]): uint64_t = native.extern
  type struct_uv_getaddrinfo_s = native.CStruct12[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.Ptr[uv_loop_t],struct_uv__work,native.CFunctionPtr3[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_2, Digit[_8, _0]]]]],native.CInt,native.Ptr[struct_addrinfo],Unit],native.Ptr[struct_addrinfo],native.Ptr[native.CChar],native.Ptr[native.CChar],native.Ptr[struct_addrinfo],native.CInt]
  def uv_getaddrinfo(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_getaddrinfo_t], getaddrinfo_cb: native.CFunctionPtr3[native.Ptr[uv_getaddrinfo_t],native.CInt,native.Ptr[struct_addrinfo],Unit], node: native.Ptr[native.CChar], service: native.Ptr[native.CChar], hints: native.Ptr[struct_addrinfo]): native.CInt = native.extern
  def uv_freeaddrinfo(ai: native.Ptr[struct_addrinfo]): Unit = native.extern
  type struct_uv_getnameinfo_s = native.CStruct12[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.Ptr[uv_loop_t],struct_uv__work,native.CFunctionPtr4[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_5, Digit[_6, _0]]]]]],native.CInt,native.Ptr[native.CChar],native.Ptr[native.CChar],Unit],struct_sockaddr_storage,native.CInt,native.CArray[native.CChar, Digit[_1, Digit[_0, Digit[_2, _5]]]],native.CArray[native.CChar, Digit[_3, _2]],native.CInt]
  def uv_getnameinfo(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_getnameinfo_t], getnameinfo_cb: native.CFunctionPtr4[native.Ptr[uv_getnameinfo_t],native.CInt,native.Ptr[native.CChar],native.Ptr[native.CChar],Unit], addr: native.Ptr[struct_sockaddr], flags: native.CInt): native.CInt = native.extern
  type enum_uv_stdio_flags = native.CInt
  type uv_stdio_flags = enum_uv_stdio_flags
  type struct_uv_stdio_container_s = native.CStruct2[uv_stdio_flags,native.CArray[Byte, Digit[_6, _4]]]
  type uv_stdio_container_t = struct_uv_stdio_container_s
  type struct_uv_process_options_s = native.CStruct10[native.CFunctionPtr3[native.Ptr[uv_process_t],int64_t,native.CInt,Unit],native.Ptr[native.CChar],native.Ptr[native.Ptr[native.CChar]],native.Ptr[native.Ptr[native.CChar]],native.Ptr[native.CChar],native.CUnsignedInt,native.CInt,native.Ptr[uv_stdio_container_t],uv_uid_t,uv_gid_t]
  type uv_process_options_t = struct_uv_process_options_s
  type enum_uv_process_flags = native.CInt
  type struct_uv_process_s = native.CStruct12[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr3[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_8, _8]]]]],int64_t,native.CInt,Unit],native.CInt,native.CArray[native.Ptr[Byte], _2],native.CInt]
  def uv_spawn(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_process_t], options: native.Ptr[uv_process_options_t]): native.CInt = native.extern
  def uv_process_kill(anonymous: native.Ptr[uv_process_t], signum: native.CInt): native.CInt = native.extern
  def uv_kill(pid: native.CInt, signum: native.CInt): native.CInt = native.extern
  type struct_uv_work_s = native.CStruct8[native.Ptr[Byte],uv_req_type,native.CArray[native.Ptr[Byte], _2],native.CArray[native.Ptr[Byte], _4],native.Ptr[uv_loop_t],native.CFunctionPtr1[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_2, _4]]]]],Unit],native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_2, _4]]]]],native.CInt,Unit],struct_uv__work]
  def uv_queue_work(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_work_t], work_cb: native.CFunctionPtr1[native.Ptr[uv_work_t],Unit], after_work_cb: native.CFunctionPtr2[native.Ptr[uv_work_t],native.CInt,Unit]): native.CInt = native.extern
  def uv_cancel(req: native.Ptr[uv_req_t]): native.CInt = native.extern
  type struct_uv_cpu_info_s = native.CStruct3[native.Ptr[native.CChar],native.CInt,struct_uv_cpu_times_s]
  type struct_uv_cpu_times_s = native.CStruct5[uint64_t,uint64_t,uint64_t,uint64_t,uint64_t]
  type struct_uv_interface_address_s = native.CStruct5[native.Ptr[native.CChar],native.CArray[native.CChar, _6],native.CInt,native.CArray[Byte, Digit[_2, Digit[_2, _4]]],native.CArray[Byte, Digit[_2, Digit[_2, _4]]]]
  type enum_uv_dirent_type_t = native.CInt
  type uv_dirent_type_t = enum_uv_dirent_type_t
  type struct_uv_dirent_s = native.CStruct2[native.Ptr[native.CChar],uv_dirent_type_t]
  def uv_setup_args(argc: native.CInt, argv: native.Ptr[native.Ptr[native.CChar]]): native.Ptr[native.Ptr[native.CChar]] = native.extern
  def uv_get_process_title(buffer: native.Ptr[native.CChar], size: native.CSize): native.CInt = native.extern
  def uv_set_process_title(title: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_resident_set_memory(rss: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_uptime(uptime: native.Ptr[native.CDouble]): native.CInt = native.extern
  type struct_uv_timeval_t = native.CStruct2[native.CLong,native.CLong]
  type uv_timeval_t = struct_uv_timeval_t
  type struct_uv_rusage_t = native.CStruct16[uv_timeval_t,uv_timeval_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t]
  type uv_rusage_t = struct_uv_rusage_t
  def uv_getrusage(rusage: native.Ptr[uv_rusage_t]): native.CInt = native.extern
  def uv_os_homedir(buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_cpu_info(cpu_infos: native.Ptr[native.Ptr[uv_cpu_info_t]], count: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_free_cpu_info(cpu_infos: native.Ptr[uv_cpu_info_t], count: native.CInt): Unit = native.extern
  def uv_interface_addresses(addresses: native.Ptr[native.Ptr[uv_interface_address_t]], count: native.Ptr[native.CInt]): native.CInt = native.extern
  def uv_free_interface_addresses(addresses: native.Ptr[uv_interface_address_t], count: native.CInt): Unit = native.extern
  type enum_uv_fs_type = native.CInt
  type uv_fs_type = enum_uv_fs_type
  type struct_uv_fs_s = native.CArray[Byte, Digit[_3, Digit[_5, Digit[_2, _0]]]]
  def uv_fs_req_cleanup(req: native.Ptr[uv_fs_t]): Unit = native.extern
  def uv_fs_close(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_open(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], flags: native.CInt, mode: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_read(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, offset: int64_t, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_unlink(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_write(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, bufs: native.Ptr[uv_buf_t], nbufs: native.CUnsignedInt, offset: int64_t, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_mkdir(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], mode: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_mkdtemp(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], tpl: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_rmdir(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_scandir(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], flags: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_scandir_next(req: native.Ptr[uv_fs_t], ent: native.Ptr[uv_dirent_t]): native.CInt = native.extern
  def uv_fs_stat(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_fstat(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_rename(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], new_path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_fsync(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_fdatasync(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_ftruncate(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, offset: int64_t, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_sendfile(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], out_fd: uv_file, in_fd: uv_file, in_offset: int64_t, length: native.CSize, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_access(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], mode: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_chmod(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], mode: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_utime(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], atime: native.CDouble, mtime: native.CDouble, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_futime(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, atime: native.CDouble, mtime: native.CDouble, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_lstat(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_link(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], new_path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_symlink(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], new_path: native.Ptr[native.CChar], flags: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_readlink(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_realpath(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_fchmod(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, mode: native.CInt, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_chown(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], path: native.Ptr[native.CChar], uid: uv_uid_t, gid: uv_gid_t, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  def uv_fs_fchown(loop: native.Ptr[uv_loop_t], req: native.Ptr[uv_fs_t], file: uv_file, uid: uv_uid_t, gid: uv_gid_t, cb: native.CFunctionPtr1[native.Ptr[uv_fs_t],Unit]): native.CInt = native.extern
  type enum_uv_fs_event = native.CInt
  type struct_uv_fs_event_s = native.CStruct12[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.Ptr[native.CChar],native.CFunctionPtr4[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_0, Digit[_8, _8]]]]],native.Ptr[native.CChar],native.CInt,native.CInt,Unit],native.CArray[native.Ptr[Byte], _2],native.CInt]
  type struct_uv_fs_poll_s = native.CStruct9[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.Ptr[Byte]]
  def uv_fs_poll_init(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_fs_poll_t]): native.CInt = native.extern
  def uv_fs_poll_start(handle: native.Ptr[uv_fs_poll_t], poll_cb: native.CFunctionPtr4[native.Ptr[uv_fs_poll_t],native.CInt,native.Ptr[uv_stat_t],native.Ptr[uv_stat_t],Unit], path: native.Ptr[native.CChar], interval: native.CUnsignedInt): native.CInt = native.extern
  def uv_fs_poll_stop(handle: native.Ptr[uv_fs_poll_t]): native.CInt = native.extern
  def uv_fs_poll_getpath(handle: native.Ptr[uv_fs_poll_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  type struct_uv_signal_s = native.CStruct13[native.Ptr[Byte],native.Ptr[uv_loop_t],uv_handle_type,native.CFunctionPtr1[native.Ptr[uv_handle_t],Unit],native.CArray[native.Ptr[Byte], _2],native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.Ptr[uv_handle_t],native.CUnsignedInt,native.CFunctionPtr2[native.Ptr[native.CArray[Byte, Digit[_1, Digit[_2, Digit[_1, _6]]]]],native.CInt,Unit],native.CInt,native.CArray[Byte, Digit[_2, Digit[_5, _6]]],native.CUnsignedInt,native.CUnsignedInt]
  def uv_signal_init(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_signal_t]): native.CInt = native.extern
  def uv_signal_start(handle: native.Ptr[uv_signal_t], signal_cb: native.CFunctionPtr2[native.Ptr[uv_signal_t],native.CInt,Unit], signum: native.CInt): native.CInt = native.extern
  def uv_signal_stop(handle: native.Ptr[uv_signal_t]): native.CInt = native.extern
  def uv_loadavg(avg: native.Ptr[native.CDouble]): Unit = native.extern
  type enum_uv_fs_event_flags = native.CInt
  def uv_fs_event_init(loop: native.Ptr[uv_loop_t], handle: native.Ptr[uv_fs_event_t]): native.CInt = native.extern
  def uv_fs_event_start(handle: native.Ptr[uv_fs_event_t], cb: native.CFunctionPtr4[native.Ptr[uv_fs_event_t],native.Ptr[native.CChar],native.CInt,native.CInt,Unit], path: native.Ptr[native.CChar], flags: native.CUnsignedInt): native.CInt = native.extern
  def uv_fs_event_stop(handle: native.Ptr[uv_fs_event_t]): native.CInt = native.extern
  def uv_fs_event_getpath(handle: native.Ptr[uv_fs_event_t], buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_ip4_addr(ip: native.Ptr[native.CChar], port: native.CInt, addr: native.Ptr[struct_sockaddr_in]): native.CInt = native.extern
  def uv_ip6_addr(ip: native.Ptr[native.CChar], port: native.CInt, addr: native.Ptr[struct_sockaddr_in6]): native.CInt = native.extern
  def uv_ip4_name(src: native.Ptr[struct_sockaddr_in], dst: native.Ptr[native.CChar], size: native.CSize): native.CInt = native.extern
  def uv_ip6_name(src: native.Ptr[struct_sockaddr_in6], dst: native.Ptr[native.CChar], size: native.CSize): native.CInt = native.extern
  def uv_inet_ntop(af: native.CInt, src: native.Ptr[Byte], dst: native.Ptr[native.CChar], size: native.CSize): native.CInt = native.extern
  def uv_inet_pton(af: native.CInt, src: native.Ptr[native.CChar], dst: native.Ptr[Byte]): native.CInt = native.extern
  def uv_exepath(buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_cwd(buffer: native.Ptr[native.CChar], size: native.Ptr[native.CSize]): native.CInt = native.extern
  def uv_chdir(dir: native.Ptr[native.CChar]): native.CInt = native.extern
  def uv_get_free_memory(): uint64_t = native.extern
  def uv_get_total_memory(): uint64_t = native.extern
  def uv_hrtime(): uint64_t = native.extern
  def uv_disable_stdio_inheritance(): Unit = native.extern
  def uv_dlopen(filename: native.Ptr[native.CChar], lib: native.Ptr[uv_lib_t]): native.CInt = native.extern
  def uv_dlclose(lib: native.Ptr[uv_lib_t]): Unit = native.extern
  def uv_dlsym(lib: native.Ptr[uv_lib_t], name: native.Ptr[native.CChar], ptr: native.Ptr[native.Ptr[Byte]]): native.CInt = native.extern
  def uv_dlerror(lib: native.Ptr[uv_lib_t]): native.Ptr[native.CChar] = native.extern
  def uv_mutex_init(handle: native.Ptr[uv_mutex_t]): native.CInt = native.extern
  def uv_mutex_destroy(handle: native.Ptr[uv_mutex_t]): Unit = native.extern
  def uv_mutex_lock(handle: native.Ptr[uv_mutex_t]): Unit = native.extern
  def uv_mutex_trylock(handle: native.Ptr[uv_mutex_t]): native.CInt = native.extern
  def uv_mutex_unlock(handle: native.Ptr[uv_mutex_t]): Unit = native.extern
  def uv_rwlock_init(rwlock: native.Ptr[uv_rwlock_t]): native.CInt = native.extern
  def uv_rwlock_destroy(rwlock: native.Ptr[uv_rwlock_t]): Unit = native.extern
  def uv_rwlock_rdlock(rwlock: native.Ptr[uv_rwlock_t]): Unit = native.extern
  def uv_rwlock_tryrdlock(rwlock: native.Ptr[uv_rwlock_t]): native.CInt = native.extern
  def uv_rwlock_rdunlock(rwlock: native.Ptr[uv_rwlock_t]): Unit = native.extern
  def uv_rwlock_wrlock(rwlock: native.Ptr[uv_rwlock_t]): Unit = native.extern
  def uv_rwlock_trywrlock(rwlock: native.Ptr[uv_rwlock_t]): native.CInt = native.extern
  def uv_rwlock_wrunlock(rwlock: native.Ptr[uv_rwlock_t]): Unit = native.extern
  def uv_sem_init(sem: native.Ptr[uv_sem_t], value: native.CUnsignedInt): native.CInt = native.extern
  def uv_sem_destroy(sem: native.Ptr[uv_sem_t]): Unit = native.extern
  def uv_sem_post(sem: native.Ptr[uv_sem_t]): Unit = native.extern
  def uv_sem_wait(sem: native.Ptr[uv_sem_t]): Unit = native.extern
  def uv_sem_trywait(sem: native.Ptr[uv_sem_t]): native.CInt = native.extern
  def uv_cond_init(cond: native.Ptr[uv_cond_t]): native.CInt = native.extern
  def uv_cond_destroy(cond: native.Ptr[uv_cond_t]): Unit = native.extern
  def uv_cond_signal(cond: native.Ptr[uv_cond_t]): Unit = native.extern
  def uv_cond_broadcast(cond: native.Ptr[uv_cond_t]): Unit = native.extern
  def uv_barrier_init(barrier: native.Ptr[uv_barrier_t], count: native.CUnsignedInt): native.CInt = native.extern
  def uv_barrier_destroy(barrier: native.Ptr[uv_barrier_t]): Unit = native.extern
  def uv_barrier_wait(barrier: native.Ptr[uv_barrier_t]): native.CInt = native.extern
  def uv_cond_wait(cond: native.Ptr[uv_cond_t], mutex: native.Ptr[uv_mutex_t]): Unit = native.extern
  def uv_cond_timedwait(cond: native.Ptr[uv_cond_t], mutex: native.Ptr[uv_mutex_t], timeout: uint64_t): native.CInt = native.extern
  def uv_once(guard: native.Ptr[uv_once_t], callback: native.CFunctionPtr0[Unit]): Unit = native.extern
  def uv_key_create(key: native.Ptr[uv_key_t]): native.CInt = native.extern
  def uv_key_delete(key: native.Ptr[uv_key_t]): Unit = native.extern
  def uv_key_get(key: native.Ptr[uv_key_t]): native.Ptr[Byte] = native.extern
  def uv_key_set(key: native.Ptr[uv_key_t], value: native.Ptr[Byte]): Unit = native.extern
  type uv_thread_cb = native.CFunctionPtr1[native.Ptr[Byte],Unit]
  def uv_thread_create(tid: native.Ptr[uv_thread_t], entry: native.CFunctionPtr1[native.Ptr[Byte],Unit], arg: native.Ptr[Byte]): native.CInt = native.extern
  def uv_thread_self(): uv_thread_t = native.extern
  def uv_thread_join(tid: native.Ptr[uv_thread_t]): native.CInt = native.extern
  def uv_thread_equal(t1: native.Ptr[uv_thread_t], t2: native.Ptr[uv_thread_t]): native.CInt = native.extern
  type union_uv_any_handle = native.CArray[Byte, Digit[_2, Digit[_4, Digit[_9, _6]]]]
  type union_uv_any_req = native.CArray[Byte, Digit[_1, Digit[_0, Digit[_5, Digit[_6, _0]]]]]
  type struct_uv_loop_s = native.CArray[Byte, Digit[_6, Digit[_7, Digit[_8, _4]]]]
}

object uvEnums {
  final val enum_uv_errno_t_UV_E2BIG = 0
  final val enum_uv_errno_t_UV_EACCES = 1
  final val enum_uv_errno_t_UV_EADDRINUSE = 2
  final val enum_uv_errno_t_UV_EADDRNOTAVAIL = 3
  final val enum_uv_errno_t_UV_EAFNOSUPPORT = 4
  final val enum_uv_errno_t_UV_EAGAIN = 5
  final val enum_uv_errno_t_UV_EAI_ADDRFAMILY = 6
  final val enum_uv_errno_t_UV_EAI_AGAIN = 7
  final val enum_uv_errno_t_UV_EAI_BADFLAGS = 8
  final val enum_uv_errno_t_UV_EAI_BADHINTS = 9
  final val enum_uv_errno_t_UV_EAI_CANCELED = 10
  final val enum_uv_errno_t_UV_EAI_FAIL = 11
  final val enum_uv_errno_t_UV_EAI_FAMILY = 12
  final val enum_uv_errno_t_UV_EAI_MEMORY = 13
  final val enum_uv_errno_t_UV_EAI_NODATA = 14
  final val enum_uv_errno_t_UV_EAI_NONAME = 15
  final val enum_uv_errno_t_UV_EAI_OVERFLOW = 16
  final val enum_uv_errno_t_UV_EAI_PROTOCOL = 17
  final val enum_uv_errno_t_UV_EAI_SERVICE = 18
  final val enum_uv_errno_t_UV_EAI_SOCKTYPE = 19
  final val enum_uv_errno_t_UV_EALREADY = 20
  final val enum_uv_errno_t_UV_EBADF = 21
  final val enum_uv_errno_t_UV_EBUSY = 22
  final val enum_uv_errno_t_UV_ECANCELED = 23
  final val enum_uv_errno_t_UV_ECHARSET = 24
  final val enum_uv_errno_t_UV_ECONNABORTED = 25
  final val enum_uv_errno_t_UV_ECONNREFUSED = 26
  final val enum_uv_errno_t_UV_ECONNRESET = 27
  final val enum_uv_errno_t_UV_EDESTADDRREQ = 28
  final val enum_uv_errno_t_UV_EEXIST = 29
  final val enum_uv_errno_t_UV_EFAULT = 30
  final val enum_uv_errno_t_UV_EFBIG = 31
  final val enum_uv_errno_t_UV_EHOSTUNREACH = 32
  final val enum_uv_errno_t_UV_EINTR = 33
  final val enum_uv_errno_t_UV_EINVAL = 34
  final val enum_uv_errno_t_UV_EIO = 35
  final val enum_uv_errno_t_UV_EISCONN = 36
  final val enum_uv_errno_t_UV_EISDIR = 37
  final val enum_uv_errno_t_UV_ELOOP = 38
  final val enum_uv_errno_t_UV_EMFILE = 39
  final val enum_uv_errno_t_UV_EMSGSIZE = 40
  final val enum_uv_errno_t_UV_ENAMETOOLONG = 41
  final val enum_uv_errno_t_UV_ENETDOWN = 42
  final val enum_uv_errno_t_UV_ENETUNREACH = 43
  final val enum_uv_errno_t_UV_ENFILE = 44
  final val enum_uv_errno_t_UV_ENOBUFS = 45
  final val enum_uv_errno_t_UV_ENODEV = 46
  final val enum_uv_errno_t_UV_ENOENT = 47
  final val enum_uv_errno_t_UV_ENOMEM = 48
  final val enum_uv_errno_t_UV_ENONET = 49
  final val enum_uv_errno_t_UV_ENOPROTOOPT = 50
  final val enum_uv_errno_t_UV_ENOSPC = 51
  final val enum_uv_errno_t_UV_ENOSYS = 52
  final val enum_uv_errno_t_UV_ENOTCONN = 53
  final val enum_uv_errno_t_UV_ENOTDIR = 54
  final val enum_uv_errno_t_UV_ENOTEMPTY = 55
  final val enum_uv_errno_t_UV_ENOTSOCK = 56
  final val enum_uv_errno_t_UV_ENOTSUP = 57
  final val enum_uv_errno_t_UV_EPERM = 58
  final val enum_uv_errno_t_UV_EPIPE = 59
  final val enum_uv_errno_t_UV_EPROTO = 60
  final val enum_uv_errno_t_UV_EPROTONOSUPPORT = 61
  final val enum_uv_errno_t_UV_EPROTOTYPE = 62
  final val enum_uv_errno_t_UV_ERANGE = 63
  final val enum_uv_errno_t_UV_EROFS = 64
  final val enum_uv_errno_t_UV_ESHUTDOWN = 65
  final val enum_uv_errno_t_UV_ESPIPE = 66
  final val enum_uv_errno_t_UV_ESRCH = 67
  final val enum_uv_errno_t_UV_ETIMEDOUT = 68
  final val enum_uv_errno_t_UV_ETXTBSY = 69
  final val enum_uv_errno_t_UV_EXDEV = 70
  final val enum_uv_errno_t_UV_UNKNOWN = 71
  final val enum_uv_errno_t_UV_EOF = 72
  final val enum_uv_errno_t_UV_ENXIO = 73
  final val enum_uv_errno_t_UV_EMLINK = 74
  final val enum_uv_errno_t_UV_EHOSTDOWN = 75
  final val enum_uv_errno_t_UV_ERRNO_MAX = 76
  final val enum_uv_handle_type_UV_UNKNOWN_HANDLE = 0
  final val enum_uv_handle_type_UV_ASYNC = 1
  final val enum_uv_handle_type_UV_CHECK = 2
  final val enum_uv_handle_type_UV_FS_EVENT = 3
  final val enum_uv_handle_type_UV_FS_POLL = 4
  final val enum_uv_handle_type_UV_HANDLE = 5
  final val enum_uv_handle_type_UV_IDLE = 6
  final val enum_uv_handle_type_UV_NAMED_PIPE = 7
  final val enum_uv_handle_type_UV_POLL = 8
  final val enum_uv_handle_type_UV_PREPARE = 9
  final val enum_uv_handle_type_UV_PROCESS = 10
  final val enum_uv_handle_type_UV_STREAM = 11
  final val enum_uv_handle_type_UV_TCP = 12
  final val enum_uv_handle_type_UV_TIMER = 13
  final val enum_uv_handle_type_UV_TTY = 14
  final val enum_uv_handle_type_UV_UDP = 15
  final val enum_uv_handle_type_UV_SIGNAL = 16
  final val enum_uv_handle_type_UV_FILE = 17
  final val enum_uv_handle_type_UV_HANDLE_TYPE_MAX = 18
  final val enum_uv_req_type_UV_UNKNOWN_REQ = 0
  final val enum_uv_req_type_UV_REQ = 1
  final val enum_uv_req_type_UV_CONNECT = 2
  final val enum_uv_req_type_UV_WRITE = 3
  final val enum_uv_req_type_UV_SHUTDOWN = 4
  final val enum_uv_req_type_UV_UDP_SEND = 5
  final val enum_uv_req_type_UV_FS = 6
  final val enum_uv_req_type_UV_WORK = 7
  final val enum_uv_req_type_UV_GETADDRINFO = 8
  final val enum_uv_req_type_UV_GETNAMEINFO = 9
  final val enum_uv_req_type_UV_REQ_TYPE_MAX = 10
  final val enum_uv_loop_option_UV_LOOP_BLOCK_SIGNAL = 0
  final val enum_uv_run_mode_UV_RUN_DEFAULT = 0
  final val enum_uv_run_mode_UV_RUN_ONCE = 1
  final val enum_uv_run_mode_UV_RUN_NOWAIT = 2
  final val enum_uv_membership_UV_LEAVE_GROUP = 0
  final val enum_uv_membership_UV_JOIN_GROUP = 1
  final val enum_uv_tcp_flags_UV_TCP_IPV6ONLY = 0
  final val enum_uv_udp_flags_UV_UDP_IPV6ONLY = 0
  final val enum_uv_udp_flags_UV_UDP_PARTIAL = 1
  final val enum_uv_udp_flags_UV_UDP_REUSEADDR = 2
  final val enum_uv_tty_mode_t_UV_TTY_MODE_NORMAL = 0
  final val enum_uv_tty_mode_t_UV_TTY_MODE_RAW = 1
  final val enum_uv_tty_mode_t_UV_TTY_MODE_IO = 2
  final val enum_uv_poll_event_UV_READABLE = 0
  final val enum_uv_poll_event_UV_WRITABLE = 1
  final val enum_uv_stdio_flags_UV_IGNORE = 0
  final val enum_uv_stdio_flags_UV_CREATE_PIPE = 1
  final val enum_uv_stdio_flags_UV_INHERIT_FD = 2
  final val enum_uv_stdio_flags_UV_INHERIT_STREAM = 3
  final val enum_uv_stdio_flags_UV_READABLE_PIPE = 4
  final val enum_uv_stdio_flags_UV_WRITABLE_PIPE = 5
  final val enum_uv_process_flags_UV_PROCESS_SETUID = 0
  final val enum_uv_process_flags_UV_PROCESS_SETGID = 1
  final val enum_uv_process_flags_UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = 2
  final val enum_uv_process_flags_UV_PROCESS_DETACHED = 3
  final val enum_uv_process_flags_UV_PROCESS_WINDOWS_HIDE = 4
  final val enum_uv_dirent_type_t_UV_DIRENT_UNKNOWN = 0
  final val enum_uv_dirent_type_t_UV_DIRENT_FILE = 1
  final val enum_uv_dirent_type_t_UV_DIRENT_DIR = 2
  final val enum_uv_dirent_type_t_UV_DIRENT_LINK = 3
  final val enum_uv_dirent_type_t_UV_DIRENT_FIFO = 4
  final val enum_uv_dirent_type_t_UV_DIRENT_SOCKET = 5
  final val enum_uv_dirent_type_t_UV_DIRENT_CHAR = 6
  final val enum_uv_dirent_type_t_UV_DIRENT_BLOCK = 7
  final val enum_uv_fs_type_UV_FS_UNKNOWN = 0
  final val enum_uv_fs_type_UV_FS_CUSTOM = 1
  final val enum_uv_fs_type_UV_FS_OPEN = 2
  final val enum_uv_fs_type_UV_FS_CLOSE = 3
  final val enum_uv_fs_type_UV_FS_READ = 4
  final val enum_uv_fs_type_UV_FS_WRITE = 5
  final val enum_uv_fs_type_UV_FS_SENDFILE = 6
  final val enum_uv_fs_type_UV_FS_STAT = 7
  final val enum_uv_fs_type_UV_FS_LSTAT = 8
  final val enum_uv_fs_type_UV_FS_FSTAT = 9
  final val enum_uv_fs_type_UV_FS_FTRUNCATE = 10
  final val enum_uv_fs_type_UV_FS_UTIME = 11
  final val enum_uv_fs_type_UV_FS_FUTIME = 12
  final val enum_uv_fs_type_UV_FS_ACCESS = 13
  final val enum_uv_fs_type_UV_FS_CHMOD = 14
  final val enum_uv_fs_type_UV_FS_FCHMOD = 15
  final val enum_uv_fs_type_UV_FS_FSYNC = 16
  final val enum_uv_fs_type_UV_FS_FDATASYNC = 17
  final val enum_uv_fs_type_UV_FS_UNLINK = 18
  final val enum_uv_fs_type_UV_FS_RMDIR = 19
  final val enum_uv_fs_type_UV_FS_MKDIR = 20
  final val enum_uv_fs_type_UV_FS_MKDTEMP = 21
  final val enum_uv_fs_type_UV_FS_RENAME = 22
  final val enum_uv_fs_type_UV_FS_SCANDIR = 23
  final val enum_uv_fs_type_UV_FS_LINK = 24
  final val enum_uv_fs_type_UV_FS_SYMLINK = 25
  final val enum_uv_fs_type_UV_FS_READLINK = 26
  final val enum_uv_fs_type_UV_FS_CHOWN = 27
  final val enum_uv_fs_type_UV_FS_FCHOWN = 28
  final val enum_uv_fs_type_UV_FS_REALPATH = 29
  final val enum_uv_fs_event_UV_RENAME = 0
  final val enum_uv_fs_event_UV_CHANGE = 1
  final val enum_uv_fs_event_flags_UV_FS_EVENT_WATCH_ENTRY = 0
  final val enum_uv_fs_event_flags_UV_FS_EVENT_STAT = 1
  final val enum_uv_fs_event_flags_UV_FS_EVENT_RECURSIVE = 2
}
